<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://KiWiLss.github.io</id>
    <title>Gridea</title>
    <updated>2021-07-04T07:44:59.452Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://KiWiLss.github.io"/>
    <link rel="self" href="https://KiWiLss.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://KiWiLss.github.io/images/avatar.png</logo>
    <icon>https://KiWiLss.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Activity Result Api DSl]]></title>
        <id>https://KiWiLss.github.io/post/ActivityResultApi/</id>
        <link href="https://KiWiLss.github.io/post/ActivityResultApi/">
        </link>
        <updated>2021-07-04T07:37:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在安卓开发中，跳转和申请权限设计的比较麻烦，网上有很多优秀的库解决这个问题，谷歌对这个问题做了处理，废弃了以前的方法。具体的使用方法可以参考末尾的参考博客。下面是对这些方法做的基本封装，方便使用。</p>
<h2 id="intentktx">IntentKtx</h2>
<p>这个类是对普通跳转的封装，可以用也可以不用，主要是方便实现简单的跳转。都是扩展函数，直接在 Activity/Fragment 中使用即可。</p>
<pre><code>createIntent            :生成Intent并添加参数(可选）
createIntentStart       :生成跳转的Intent并添加参数,也可以不添加参数
addPair                 :Intent 添加参数
startActivityK          :跳转

browse                  :打开浏览器
share                   :生调用分享，只能分享文本
email                   :发送邮件
makeCallPermission  :拨打电话，需要权限
makeCall                :拨打电话
sendSMS                 :发送短信
</code></pre>
<h2 id="封装使用界面跳转">封装使用界面跳转</h2>
<p>最新版可以参考官网 <a href="https://developer.android.google.cn/jetpack/androidx/releases/activity#kts">Activity</a>,<a href="https://developer.android.google.cn/jetpack/androidx/releases/fragment">Framgnet</a>。</p>
<h3 id="1导入依赖">1.导入依赖</h3>
<p>我试了一下只导入最后一个也可以，只是 activity对应的版本不是最新的，如果想两个都是最新的就像下面这样，导入两个就行了。下面是原生的依赖导入：</p>
<pre><code>   //activity
    def activity_version = &quot;1.2.3&quot;
    // Java language implementation
//    implementation &quot;androidx.activity:activity:$activity_version&quot;
    // Kotlin
    api &quot;androidx.activity:activity-ktx:$activity_version&quot;
    //fragment
    def fragment_version = &quot;1.3.4&quot;
    // Java language implementation
//    implementation &quot;androidx.fragment:fragment:$fragment_version&quot;
    // Kotlin
    api &quot;androidx.fragment:fragment-ktx:$fragment_version&quot;
</code></pre>
<p>封装后的依赖导入，最新版看最后的项目地址：</p>
<pre><code>maven { url 'https://www.jitpack.io' }
 
implementation 'com.gitee.quetzalcoatl:ActivityResultApi:0.0.3'
</code></pre>
<h3 id="2跳转使用">2.跳转使用</h3>
<ol>
<li>第一步生成 ActivityResultLauncher,在这里面可以监听回调。</li>
</ol>
<pre><code>  private val startTest = startActivityForResultK {
        //这里是回调,相当于 onActivityResult
        if (it.resultCode == RESULT_OK){
            //获取回传值,这里就是以前的 intent
            it.data?.run {
                Toast.makeText(this@MainActivity,
                    &quot;${getStringExtra(&quot;result&quot;)}&quot;, Toast.LENGTH_SHORT).show()
            }
        }
    }
</code></pre>
<ol start="2">
<li>第二步调用跳转</li>
</ol>
<pre><code> fun testStart(view: View) {
        //调用跳转
        startTest.launch(createIntentStart&lt;WelcomeActivity&gt;(&quot;text&quot; to &quot;这里可以传多个参数&quot;))
    }
</code></pre>
<ol start="3">
<li>获取参数，回传信息<br>
这里和以前用法一样，没有变化，示例如下：</li>
</ol>
<pre><code>  tvText.text = intent.getStringExtra(&quot;text&quot;)
    //回传任意值
        setResult(RESULT_OK,createIntent(&quot;result&quot; to &quot;hello&quot;))
        finish()
</code></pre>
<h2 id="申请权限">申请权限</h2>
<p>申请权限和上面使用步骤类似，这里做了两种封装，一个单纯的扩展函数，可以直接调用。另一个对扩展做了封装，可以更方便调用。具体用法看下面。</p>
<h3 id="申请单个权限">申请单个权限</h3>
<ol>
<li>和以前一样在清单文件申请权限，这里随便申请两个权限</li>
</ol>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;
</code></pre>
<p>carme 和 write 就是这两个权限。</p>
<ol start="2">
<li>提前生成对象ActivityResultLauncher，两种用法看个人更喜欢哪种</li>
</ol>
<pre><code>//ktx 的用法
    val single = requestPermission(camera,
        granted = {
            //同意权限
        }, denied = {
            //拒绝权限
        }, explained = {
            //拒绝并且不再显示
        })
</code></pre>
<pre><code> // dsl 用法, 更好用更省事
    val singleDsl = requestPermissionK(camera) {
        //有两种写法,个人更喜欢下面这种不用写=,两个都写只有一个生效
        //granted = {}
        granted { /*同意权限*/ }
        denied { /*拒绝权限*/ }
        explained { /*拒绝并且不再显示*/ }
</code></pre>
<ol start="3">
<li>调用</li>
</ol>
<pre><code>//调用
//        single.launch(camera)
        singleDsl.launch(camera)
</code></pre>
<h3 id="申请多个权限">申请多个权限</h3>
<p>使用方法基本和上面类似，这次全部放在一起。</p>
<pre><code>  //ktx 写法
    val multiple = requestMultiplePermissions(
        allGranted = {
            //全部同意
        },denied = {
            //拒绝
        },explained = {
            //拒绝并不再显示
        }
    )
    //dsl
    val multipleDsl = requestPermissionK {
        allGranted {  }
        denied {  }
        explained {  }
    }
    fun applyMultiple(view: View) {
//        multiple.launch(arrayOf(camera,write))
        multipleDsl.launch(arrayOf(camera,write))
    }
</code></pre>
<h2 id="参考">参考</h2>
<p><a href="https://gitee.com/quetzalcoatl/ActivityResultApi">项目地址</a></p>
<p><a href="https://juejin.cn/post/6844904200644591630">开源项目：使用 Activity Result API + Kotlin 扩展函数 封装权限请求库(支持 DSL 写法)</a></p>
<p><a href="https://www.jianshu.com/p/b18a57a497b3">Jetpack Activity Result API 优雅的实现页面传值</a></p>
<p><a href="https://mp.weixin.qq.com/s/r_9x7-48_tD-cFOX07GDfA">Android 新出功能 ActivityResultContract，真香！</a></p>
<p><a href="https://mp.weixin.qq.com/s/jcnFN73d002OfRXRx6u3yA">你好，Activity Results API！</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://KiWiLss.github.io/post/hello-gridea/</id>
        <link href="https://KiWiLss.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>